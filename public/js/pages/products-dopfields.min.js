/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 90);
/******/ })
/************************************************************************/
/******/ ({

/***/ 90:
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(91);


/***/ }),

/***/ 91:
/***/ (function(module, exports) {

var app = new Vue({
	el: '#app',
	data: {
		customfields: {},
		pagination: {
			'current_page': 1
		}
	},
	methods: {
		fetchProducts: function fetchProducts() {
			var _this = this;

			axios.get('/product-custom-fields/list/json?page=' + this.pagination.current_page) //this.pagination.current_page
			.then(function (response) {
				_this.customfields = response.data.data.data;
				_this.pagination = response.data.pagination;
			}).catch(function (error) {
				console.log(error.response.data);
			});
		},
		addCustomField: function addCustomField() {
			var message = "<label>Введите название для нового поля</label><br>" + "Обратите внимание, что новое поле добавится ко всем товарам!<br><br>" + "<input id='product-dopfield-name' class='form-control' type='text' value='' placeholder='Введите название нового поля'><br>" + "<label>Выберите тип дополнительного поля</label>" + "<select id='product-dopfield-type' class='form-control'>" + "<option value='name'>Название</option>" + "<option value='article'>Артикул</option>" + "<option value='cost'>Цена</option>" + "<option value='primecost'>Себестоимость</option>" + "<option value='description'>Описание</option>" + "</select>";
			modal({
				'modalTitle': 'Добавление дополнительного поля',
				'modalMessage': message,
				'okTitle': 'Добавить',
				'cancelTitle': 'Отмена',
				'type': 'modal-default',
				'onOk': function onOk() {
					var product_dopfield_name = $('#product-dopfield-name').val();
					var product_dopfield_type = $('#product-dopfield-type').val();
					var product_dop_field = {
						'name': product_dopfield_name,
						'type': product_dopfield_type
					};
					axios.post('/settings/product-custom-fields', { product_dop_field: product_dop_field }).then(function (response) {
						document.location.href = location.href;
					});
				},
				'onCancel': function onCancel() {}
			});
		},
		deleteCustomField: function deleteCustomField(custom_field_id) {
			modal({
				'modalTitle': 'Удаление дополнительного поля',
				'modalMessage': 'Вы действительно хотите удалить данное поле?',
				'okTitle': 'Да',
				'cancelTitle': 'Отмена',
				'type': 'modal-default',
				'onOk': function onOk() {
					axios.delete('/settings/product-custom-fields/' + custom_field_id).then(function (response) {
						document.location.href = location.href;
					});
				},
				'onCancel': function onCancel() {}
			});
		},
		editCustomField: function editCustomField(custom_field_id) {
			axios.get('/settings/product-custom-fields/' + custom_field_id).then(function (response) {
				name = response.data['name'];
				type = response.data['type'];
				var message = "<label>Введите название для нового поля</label><br>" + "<input id='product-dopfield-name' class='form-control' type='text' value='" + name + "' placeholder='Введите название нового поля'><br>" + "<label>Выберите тип дополнительного поля</label>" + "<select id='product-dopfield-type' class='form-control'>";

				//Todo Безобразие. Нужно исправить этот балаган!

				if (type == 'name') {
					message += "<option selected='selected' value='name'>Название</option>";
				} else {
					message += "<option value='name'>Название</option>";
				}

				if (type == 'article') {
					message += "<option selected='selected' value='article'>Артикул</option>";
				} else {
					message += "<option value='article'>Артикул</option>";
				}

				if (type == 'cost') {
					message += "<option selected='selected' value='cost'>Цена</option>";
				} else {
					message += "<option value='cost'>Цена</option>";
				}

				if (type == 'primecost') {
					message += "<option selected='selected' value='primecost'>Себестоимость</option>";
				} else {
					message += "<option value='primecost'>Себестоимость</option>";
				}

				if (type == 'description') {
					message += "<option selected='selected' value='description'>Описание</option>";
				} else {
					message += "<option value='description'>Описание</option>";
				}

				message += "</select>";

				modal({
					'modalTitle': 'Редактирование дополнительного поля',
					'modalMessage': message,
					'okTitle': 'Да',
					'cancelTitle': 'Отмена',
					'type': 'modal-default',
					'onOk': function onOk() {
						var product_dopfield_name = $('#product-dopfield-name').val();
						var product_dopfield_type = $('#product-dopfield-type').val();
						var product_dop_field = {
							'name': product_dopfield_name,
							'type': product_dopfield_type
						};
						axios.put('/settings/product-custom-fields/' + custom_field_id, { product_dop_field: product_dop_field }).then(function (response) {
							document.location.href = location.href;
						});
					},
					'onCancel': function onCancel() {}
				});
			});
		}
	},
	mounted: function mounted() {
		this.fetchProducts();
	}
});

/***/ })

/******/ });