/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 123);
/******/ })
/************************************************************************/
/******/ ({

/***/ 123:
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(124);


/***/ }),

/***/ 124:
/***/ (function(module, exports) {

new window.Vue({
    el: '#app',
    data: {
        roles: [],
        employees: [],
        update: []
    },
    mounted: function mounted() {
        var _this = this;

        //Get employee card for initialize boject
        window.axios.get('/settings/employee/json').then(function (response) {
            _this.employees = response.data;

            //Get roles 
            window.axios.get('/settings/role/json').then(function (response) {
                _this.roles = response.data;
                _this.init();
            }).catch(function (error) {
                window.ajaxError(error);
            });
        }).catch(function (error) {
            window.ajaxError(error);
        });
    },
    methods: {
        store: function store() {
            window.axios.put('', this.update).then(function (response) {
                window.ajaxSuccess(response.data.message);
            }).catch(function (error) {
                window.ajaxError(error);
            });
        },

        //Check if user has role
        hasRole: function hasRole(employee, roleName) {
            if (employee.roles) {
                var exist = employee.roles.filter(function (role) {
                    return role.name === roleName;
                });
                return exist.length > 0;
            }
            return false;
        },

        init: function init() {
            var _this2 = this;

            this.$nextTick(function () {
                $('input[type="checkbox"]').iCheck({
                    checkboxClass: 'icheckbox_square-blue',
                    radioClass: 'iradio_square-blue',
                    increaseArea: '20%' // optional
                }).on('ifChanged', function (e) {
                    var $this = $(e.target),
                        employeeId = $this.data('employee-id'),
                        roleName = $this.data('role-name'),
                        status = e.target.checked;

                    var employee = _this2.update.filter(function (data) {
                        return data.employeeId === employeeId;
                    });
                    if (!employee.length) {
                        //add new
                        _this2.update.push({
                            employeeId: employeeId,
                            roles: [{ name: roleName, status: status }]
                        });
                        return;
                    }
                    var role = employee[0].roles.filter(function (role) {
                        return role.name === roleName;
                    });
                    if (!role.length) {
                        //add new
                        employee[0].roles.push({
                            name: roleName, status: status
                        });
                        return;
                    }
                    //set new status of the role
                    role[0].status = status;
                });

                //Tooltop
                $('[data-toggle="tooltip"]').tooltip();
            });
        }
    },
    computed: {
        isSaveEnabled: function isSaveEnabled() {
            return this.update.length == 0;
        }
    }
});

/***/ })

/******/ });