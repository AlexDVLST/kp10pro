/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 125);
/******/ })
/************************************************************************/
/******/ ({

/***/ 125:
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(126);


/***/ }),

/***/ 126:
/***/ (function(module, exports) {

new window.Vue({
    el: '#app',
    data: {
        roleId: 0,
        role: '',
        permissions: [],
        update: [],
        roleName: ''
    },
    mounted: function mounted() {
        var _this = this;

        //Get employee card for initialize boject
        window.axios.get('json').then(function (response) {
            var data = response.data;
            _this.roleId = data.id;
            _this.role = data.name;
            _this.roleName = data.translation_relation.translation;

            //get stored permissions
            var permissions = response.data.permissions.map(function (p) {
                return { name: p.name, value: 1 };
            });
            //set permissions
            _this.update = permissions;

            //Get permission
            window.axios.get('/settings/permission/json').then(function (response) {
                var permissions = response.data,
                    data = [],
                    ex = ['edit-own', 'delete-own', 'view-own'];

                if (permissions) {
                    $.each(permissions, function (index, permission) {
                        var nameArr = permission.name.split(' '),
                            action = nameArr[0],
                            page = nameArr[1];

                        //find same page
                        var perm = data.filter(function (val) {
                            return val.page === page;
                        });
                        //for custom actions
                        if (ex.indexOf(action) !== -1) {
                            //get real name
                            var actionReal = action.split('-')[0];
                            //find relative permission
                            var permData = perm[0].permissions.filter(function (val) {
                                return val.action === actionReal;
                            });
                            if (permData.length) {
                                if (!permData[0].custom) {
                                    permData[0].custom = [];
                                }
                                // console.log(permData[0]);
                                permData[0].custom.push({
                                    action: action,
                                    roles: permission.roles
                                });
                            }
                            return;
                        }

                        if (!perm.length) {
                            //create first
                            data.push({
                                page: page,
                                name: _this.getPageTranslation(page),
                                permissions: [{
                                    action: action,
                                    name: permission.name,
                                    translation: _this.getTranslation(action),
                                    roles: permission.roles
                                    // buttons: this.getButtons(permission)
                                }]
                            });
                            return;
                        }

                        perm[0].permissions.push({
                            action: action,
                            name: permission.name,
                            translation: _this.getTranslation(action),
                            roles: permission.roles
                            // buttons: this.getButtons(permission)
                        });
                    });

                    //add buttons
                    $.each(data, function (index, value) {
                        $.each(value.permissions, function (i, perm) {
                            perm.buttons = _this.getButtons(value.page, perm);
                        });
                    });

                    _this.permissions = data;
                }
            }).catch(function (error) {
                window.ajaxError(error);
            });
        }).catch(function (error) {
            window.ajaxError(error);
        });
    },
    methods: {

        store: function store() {
            window.axios.put('/settings/permission/' + this.roleId, this.update).then(function (response) {
                window.ajaxSuccess(response.data.message);
            }).catch(function (error) {
                window.ajaxError(error);
            });
        },
        //Get translation by permission
        getTranslation: function getTranslation(action) {
            switch (action) {
                case 'create':
                    return 'Создание';
                case 'view':
                    return 'Просмотр';
                case 'edit':
                    return 'Редактирование';
                case 'delete':
                    return 'Удаление';
                case 'import':
                    return 'Загрузка';
            }
        },
        //Get button by permission name
        getButtons: function getButtons(page, permission) {

            var name = permission.name,
                action = permission.action,
                role = this.role,
                roles = permission.roles,
                custom = permission.custom ? permission.custom : [],
                nameOwn = action + '-own ' + page;

            var active = roles.filter(function (r) {
                return r.name === role;
            }).length > 0;

            var activeOwn = custom.filter(function (c) {
                return c.action === action + '-own' && c.roles.filter(function (cr) {
                    return cr.name === role;
                }).length > 0;
            }).length > 0;

            if (page === 'product' || page === 'file-manager' || page === 'settings') {
                switch (action) {
                    case 'create':
                        return [{ name: name, value: true, label: 'Да', active: active }, { name: name, value: false, label: 'Нет', active: !active }];
                    case 'view':
                        return [{ name: name, value: true, label: 'Да', active: active }, { name: name, value: false, label: 'Нет', active: !active }];
                    case 'edit':
                        return [{ name: name, value: true, label: 'Да', active: active }, { name: name, value: false, label: 'Нет', active: !active }];
                    case 'delete':
                        return [{ name: name, value: true, label: 'Да', active: active }, { name: name, value: false, label: 'Нет', active: !active }];
                    case 'import':
                        return [{ name: name, value: true, label: 'Да', active: active }, { name: name, value: false, label: 'Нет', active: !active }];

                }
            }

            switch (action) {
                case 'create':
                    return [{ name: name, value: true, label: 'Да', active: active }, { name: name, value: false, label: 'Нет', active: !active }];
                case 'view':
                    return [{ name: name, value: true, label: 'Все', active: active }, { name: nameOwn, value: true, label: 'Свои', active: activeOwn }, { name: name, value: false, label: 'Нет', active: !active && !activeOwn }];
                case 'edit':
                    return [{ name: name, value: true, label: 'Все', active: active }, { name: nameOwn, value: true, label: 'Свои', active: activeOwn }, { name: name, value: false, label: 'Нет', active: !active && !activeOwn }];
                case 'delete':
                    return [{ name: name, value: true, label: 'Все', active: active }, { name: nameOwn, value: true, label: 'Свои', active: activeOwn }, { name: name, value: false, label: 'Нет', active: !active && !activeOwn }];
            }
        },
        //Get page translation
        getPageTranslation: function getPageTranslation(page) {
            switch (page) {
                case 'offer':
                    return 'КП';
                case 'product':
                    return 'Товары';
                case 'file-manager':
                    return 'Фотографии';
                case 'client':
                    return 'Клиенты';
                case 'settings':
                    return 'Настройки';
            }
        },
        //Check enable
        isPermissionEnabled: function isPermissionEnabled(role, roles) {
            return roles.filter(function (role) {
                return role.name === role;
            }).length > 0;
        },
        //Update result array
        changeUpdate: function changeUpdate(e, button) {
            var _this2 = this;

            var $this = $(e.target),
                name = $this.data('name'),
                nameReal = name.replace(/(-\w+)?/g, '');

            $this.closest('div').find('button.active').removeClass('active');
            $this.addClass('active');

            //remove exists
            this.update.forEach(function (element, index) {
                //find same permission
                if (element.name.replace(/(-\w+)?/g, '') === nameReal) {
                    //remove
                    _this2.update.splice(index, 1);
                }
            });
            //add only enabled permission
            if (button.value) {
                //add permission
                this.update.push({ name: name, value: button.value });
            }
        }
    },
    computed: {
        isSaveEnabled: function isSaveEnabled() {
            return this.update.length == 0;
        }
    }
});

/***/ })

/******/ });